// =================================================================
// 1. C·∫§U H√åNH & KH·ªûI T·∫†O FIREBASE
// =================================================================

// D√ÅN M√É C·∫§U H√åNH C·ª¶A B·∫†N V√ÄO ƒê√ÇY
const firebaseConfig = {
    apiKey: "AIzaSyCDEa_NKenTTQqSj1CKYJP02Al1VQC29K",
    authDomain: "bamchuong26.firebaseapp.com",
    databaseURL: "https://bamchuong26-default-rtdb.asia-southeast1.firebasedatabase.app",
    projectId: "bamchuong26",
    storageBucket: "bamchuong26.appspot.com", 
    messagingSenderId: "1836167181367",
    appId: "1:1836167181367:web:3882d805c836164908a4232",
    measurementId: "G-Q7TT3TLYFV"
};

// Kh·ªüi t·∫°o Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.database();

const gameRef = db.ref('game_session');
const playersRef = db.ref('players');
const teacherStatusRef = db.ref('teacher_status/online'); 

// =================================================================
// 2. KHAI B√ÅO BI·∫æN & C·∫§U H√åNH C·ª§C B·ªò
// =================================================================

const TEAM_COLORS = {
    red: { name: 'ƒê·ªôi ƒê·ªè', code: '#E74C3C' },
    blue: { name: 'ƒê·ªôi Xanh D∆∞∆°ng', code: '#3498DB' },
    green: { name: 'ƒê·ªôi Xanh L√°', code: '#2ECC71' },
    yellow: { name: 'ƒê·ªôi V√†ng', code: '#F1C40F' },
    purple: { name: 'ƒê·ªôi T√≠m', code: '#9B59B6' }
};

let userRole = null; 
let studentTeam = null; 
let buzzerAllowed = false; 

let pressCountBeforeBuzzer = 0; 
let isFrozen = false; 

const audioBip = new Audio('bip.mp3'); 
const audioPing = new Audio('ping.mp3'); 


// H√†m c·ªë g·∫Øng m·ªü kh√≥a audio V√Ä rung b·∫±ng c√°ch ph√°t m·ªôt √¢m thanh
async function unlockAudio() {
    try {
        audioBip.volume = 1.0; 
        audioPing.volume = 1.0; 
        
        // C·ªë g·∫Øng ph√°t √¢m thanh ƒë·ªÉ m·ªü kh√≥a AudioContext
        await audioBip.play();
        audioBip.pause(); 
        audioBip.currentTime = 0;
        
        // K√≠ch ho·∫°t rung (th·ª≠ nghi·ªám)
        navigator.vibrate(50); 

        console.log("Audio and Vibration unlocked successfully!");
        return true;
    } catch (e) {
        console.warn("Audio unlock failed, waiting for user interaction.");
        return false;
    }
}


// =================================================================
// 3. LOGIC CH·ªåN VAI TR√í & G√ÅN ƒê·ªòI
// =================================================================

document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('role-selection-screen').style.display = 'block';

    // X·ª≠ l√Ω ch·ªçn Gi√°o vi√™n
    document.getElementById('btn-teacher').onclick = () => {
        userRole = 'teacher';
        showScreen('teacher-screen');
        setupTeacherLogic();
    };

    // X·ª≠ l√Ω ch·ªçn H·ªçc sinh
    document.querySelectorAll('#student-role-buttons .btn-role').forEach(button => {
        button.onclick = async (e) => {
            const color = e.target.dataset.color;
            const teamInfo = TEAM_COLORS[color];
            const playerPath = `players/${color}`;

            const snapshot = await db.ref(playerPath).once('value');
            if (snapshot.exists()) {
                alert(`ƒê·ªôi ${teamInfo.name} ƒë√£ c√≥ ng∆∞·ªùi ch·ªçn. Vui l√≤ng ch·ªçn ƒë·ªôi kh√°c!`);
                return;
            }

            await db.ref(playerPath).set({
                team_name: teamInfo.name,
                color: color,
                state: 'waiting',
                press_time: 0,
                press_count: 0, 
                yellow_cards: 0 
            });

            studentTeam = color;
            userRole = 'student';
            showScreen('student-screen');
            
            // KH√îNG G·ªåI unlockAudio() ·ªü ƒë√¢y n·ªØa, m√† ch·ªù n√∫t b·∫•m tr√™n m√†n h√¨nh HS
            
            setupStudentLogic(teamInfo);
        };
    });
    
    // ƒê·ªìng b·ªô tr·∫°ng th√°i c√°c n√∫t
    playersRef.on('value', (snapshot) => {
        const selectedTeams = snapshot.val() || {};
        document.querySelectorAll('#student-role-buttons .btn-role').forEach(button => {
            const color = button.dataset.color;
            if (selectedTeams[color] && selectedTeams[color].state !== 'waiting' && !studentTeam) { 
                button.disabled = true;
                button.textContent = TEAM_COLORS[color].name + ' (ƒê√É CH·ªåN)';
            } else if (studentTeam && button.dataset.color === studentTeam) {
                 button.disabled = true; 
            } else {
                button.disabled = false;
                button.textContent = TEAM_COLORS[color].name;
            }
        });
    });
});

function showScreen(screenId) {
    document.getElementById('role-selection-screen').style.display = 'none';
    document.getElementById('teacher-screen').style.display = 'none';
    document.getElementById('student-screen').style.display = 'none';
    document.getElementById(screenId).style.display = 'flex';
}

// H√†m tho√°t chung cho h·ªçc sinh
function exitStudentRole() {
    // X√≥a d·ªØ li·ªáu c·ªßa ƒë·ªôi n√†y (t√πy ch·ªçn)
    if (studentTeam) {
        playersRef.child(studentTeam).remove();
    }
    // Chuy·ªÉn v·ªÅ m√†n h√¨nh ch·ªçn vai tr√≤
    showScreen('role-selection-screen');
    studentTeam = null;
    userRole = null;
    isFrozen = false;
    // T·∫£i l·∫°i trang ƒë·ªÉ reset listener
    window.location.reload(); 
}


// =================================================================
// 4. LOGIC M√ÅY GI√ÅO VI√äN 
// =================================================================

function setupTeacherLogic() {
    const startButton = document.getElementById('start-button');
    const endRoundButton = document.getElementById('end-round-button'); // N√∫t K·∫æT TH√öC L∆Ø·ª¢T
    const masterResetButton = document.getElementById('master-reset-button'); // N√∫t RESET T·ªîNG
    const countdownDisplay = document.getElementById('countdown-display');
    const resultDisplay = document.getElementById('result-display');
    
    // B√°o hi·ªáu GV online v√† ƒëƒÉng k√Ω onDisconnect
    teacherStatusRef.set(true);
    teacherStatusRef.onDisconnect().set(false); 
    
    // Theo d√µi tr·∫°ng th√°i c√°c ƒë·ªôi (Hi·ªÉn th·ªã & X√°c ƒë·ªãnh ng∆∞·ªùi chi·∫øn th·∫Øng)
    playersRef.on('value', (snapshot) => {
        const teamsData = snapshot.val() || {};
        const teamsStatusDiv = document.getElementById('teams-status');
        teamsStatusDiv.innerHTML = '';
        
        let allPlayers = Object.values(teamsData);
        
        // 1. S·∫Øp x·∫øp v√† t√¨m ng∆∞·ªùi b·∫•m h·ª£p l·ªá ƒë·∫ßu ti√™n
        let pressedPlayers = allPlayers
            .filter(p => p.state === 'pressed' && p.press_time > 0)
            .sort((a, b) => a.press_time - b.press_time);

        // 2. C·∫≠p nh·∫≠t m√†n h√¨nh k·∫øt qu·∫£
        if (pressedPlayers.length > 0) {
            const winner = pressedPlayers[0];
            resultDisplay.innerHTML = `ü•á **${winner.team_name}** ƒê√É B·∫§M TR∆Ø·ªöC!`;
            
            // Khi c√≥ ng∆∞·ªùi b·∫•m, hi·ªán n√∫t K·∫æT TH√öC L∆Ø·ª¢T v√† ·∫©n n√∫t B·∫ÆT ƒê·∫¶U
            startButton.style.display = 'none';
            endRoundButton.style.display = 'block';
        } else {
            resultDisplay.textContent = 'ƒêang ch·ªù b·∫•m...';
            // Logic ·∫©n/hi·ªán n√∫t START/END ROUND
            gameRef.child('status').once('value').then(snap => {
                const status = snap.val();
                if (status === 'press_allowed') {
                    startButton.style.display = 'none';
                    endRoundButton.style.display = 'block';
                } else if (status === 'waiting') {
                    startButton.style.display = 'block';
                    endRoundButton.style.display = 'none';
                }
            });
        }

        // 3. Hi·ªÉn th·ªã tr·∫°ng th√°i c√°c ƒë·ªôi 
        const teamsToDisplay = [...pressedPlayers, ...allPlayers.filter(p => p.state !== 'pressed')];

        teamsToDisplay.forEach(player => {
            if (!player || !player.color) return;
            const teamBox = document.createElement('div');
            teamBox.className = 'team-box';
            
            if (player.state === 'pressed' && player.team_name === pressedPlayers[0]?.team_name) {
                teamBox.style.backgroundColor = 'gold'; 
                teamBox.style.color = '#333';
            } else {
                teamBox.style.backgroundColor = TEAM_COLORS[player.color].code;
            }
            
            let statusText = '';
            if (player.state === 'waiting') statusText = 'CH·ªú';
            else if (player.state === 'pressed') statusText = 'ƒê√É B·∫§M';
            else if (player.state === 'eliminated') statusText = 'B·ªä LO·∫†I';
            
            let cardText = player.yellow_cards > 0 ? ` (Th·∫ª V√†ng: ${player.yellow_cards})` : '';

            teamBox.innerHTML = `
                <div class="team-name">${player.team_name}</div>
                <div class="team-state">${statusText}${cardText}</div>
            `;
            teamsStatusDiv.appendChild(teamBox);
        });
    });
    
    // Theo d√µi tr·∫°ng th√°i ƒë·∫øm ng∆∞·ª£c t·ª´ Firebase
    gameRef.child('status').on('value', (snapshot) => {
        const status = snapshot.val();
        if (status === 'press_allowed') {
            countdownDisplay.innerHTML = '<span style="color: red; animation: pulse 0.5s infinite;">B·∫§M!</span>';
        } else if (status === 'waiting') {
            countdownDisplay.textContent = 'CH·ªú L·ªÜNH';
        } else if (status) {
            countdownDisplay.textContent = status; 
        }
    });

    // X·ª≠ l√Ω n√∫t K·∫æT TH√öC L∆Ø·ª¢T (ƒê∆∞a game v·ªÅ tr·∫°ng th√°i ch·ªù, gi·ªØ nguy√™n d·ªØ li·ªáu ng∆∞·ªùi ch∆°i)
    endRoundButton.onclick = async () => {
        await gameRef.set({ status: 'waiting', last_start_time: 0 });
        resultDisplay.textContent = 'CH·ªú L·ªÜNH';
        startButton.style.display = 'block';
        endRoundButton.style.display = 'none';
    };

    // X·ª≠ l√Ω n√∫t RESET T·ªîNG (K·∫æT TH√öC CU·ªòC THI)
    masterResetButton.onclick = async () => {
        if (!confirm('B·∫†N C√ì CH·∫ÆC CH·∫ÆN MU·ªêN RESET T·ªîNG? ƒêi·ªÅu n√†y s·∫Ω x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i v√† th·∫ª ph·∫°t.')) {
            return;
        }

        // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
        await playersRef.remove(); 
        // X√≥a tr·∫°ng th√°i game
        await gameRef.set({ status: 'waiting', last_start_time: 0 });
        // T·∫Øt c·ªù online c·ªßa Gi√°o vi√™n
        await teacherStatusRef.set(false);
        
        // T·∫£i l·∫°i trang ƒë·ªÉ reset giao di·ªán
        window.location.reload();
    };

    // X·ª≠ l√Ω B·∫ÆT ƒê·∫¶U l∆∞·ª£t ch∆°i 
    startButton.onclick = () => { 
        gameRef.set({ status: 'countdown', last_start_time: Date.now() })
        
        .then(() => { 
            // Reset tr·∫°ng th√°i ch∆°i c·ªßa t·∫•t c·∫£ c√°c ƒë·ªôi v·ªÅ 'waiting'
            return playersRef.once('value');
        })
        .then(snapshot => {
            const updates = {};
            snapshot.forEach(child => {
                updates[child.key + '/state'] = 'waiting';
                updates[child.key + '/press_time'] = 0;
            });
            return playersRef.update(updates);
        })
        
        .then(() => { 
            startButton.disabled = true;
            let countdown = 4;
            let timer;
            
            const runCountdown = () => {
                if (countdown >= 0) {
                    const displayNum = countdown === 0 ? '1' : countdown.toString();
                    gameRef.child('status').set(displayNum);
                    countdown--;
                    
                    const delay = Math.random() * (1500 - 500) + 500;
                    
                    if (Math.random() < 0.3 || countdown === -1) { 
                        clearTimeout(timer);
                        setTimeout(() => {
                            gameRef.child('status').set('press_allowed');
                            startButton.style.display = 'none'; 
                            endRoundButton.style.display = 'block';
                            startButton.disabled = false;
                        }, delay);
                        return;
                    }
                    
                    timer = setTimeout(runCountdown, 1500);
                }
            };
            
            timer = setTimeout(runCountdown, 1500); 
        })
        .catch(error => {
            console.error("L·ªói khi b·∫Øt ƒë·∫ßu l∆∞·ª£t ch∆°i:", error);
            alert("L·ªói k·∫øt n·ªëi Firebase, ki·ªÉm tra Console!");
            startButton.disabled = false;
        });
    };
}


// =================================================================
// 5. LOGIC M√ÅY H·ªåC SINH 
// =================================================================

function setupStudentLogic(teamInfo) {
    const buzzerButton = document.getElementById('buzzer-button');
    const teamNameDisplay = document.getElementById('team-name-display');
    const buzzerStatus = document.getElementById('buzzer-status');
    const freezeOverlay = document.getElementById('freeze-overlay');
    const audioUnlockOverlay = document.getElementById('audio-unlock-overlay'); // NEW
    const unlockAudioButton = document.getElementById('unlock-audio-button');     // NEW
    const playerPath = `players/${studentTeam}`;

    teamNameDisplay.textContent = teamInfo.name;
    buzzerButton.style.backgroundColor = teamInfo.code;
    
    // HI·ªÇN TH·ªä L·ªöP PH·ª¶ M·ªû KH√ìA NGAY KHI V√ÄO M√ÄN H√åNH HS
    audioUnlockOverlay.style.display = 'flex'; 

    // X·ª¨ L√ù N√öT M·ªû KH√ìA AUDIO
    unlockAudioButton.onclick = async () => {
        await unlockAudio();
        audioUnlockOverlay.style.display = 'none'; // ·∫®n l·ªõp ph·ªß sau khi m·ªü kh√≥a
    };

    // Theo d√µi tr·∫°ng th√°i GV v√† bu·ªôc tho√°t
    teacherStatusRef.on('value', (snapshot) => {
        if (snapshot.val() === false && userRole === 'student') {
            alert('Gi√°o vi√™n ƒë√£ tho√°t kh·ªèi phi√™n. B·∫°n s·∫Ω ƒë∆∞·ª£c ƒë∆∞a v·ªÅ m√†n h√¨nh ch·ªçn vai tr√≤.');
            // D·ª´ng theo d√µi tr·∫°ng th√°i player tr∆∞·ªõc khi tho√°t
            playersRef.child(studentTeam).off(); 
            exitStudentRole();
        }
    });

    gameRef.child('status').on('value', async (snapshot) => {
        const status = snapshot.val();
        
        // --- 1. TR·∫†NG TH√ÅI: B·∫§M! (KHI N√öT B·∫§M XU·∫§T HI·ªÜN) ---
        if (status === 'press_allowed') {
            // G·ªåI RUNG V√Ä √ÇM THANH KHI N√öT B·∫§M XU·∫§T HI·ªÜN
            audioBip.play(); 
            navigator.vibrate(100); 
            
            document.body.classList.add('flashing-bg');
            setTimeout(() => document.body.classList.remove('flashing-bg'), 500);

            let currentState = (await db.ref(playerPath + '/state').once('value')).val();
            if (currentState !== 'eliminated' && !isFrozen) { 
                buzzerAllowed = true;
                buzzerButton.disabled = false;
                buzzerButton.textContent = 'B·∫§M!';
                pressCountBeforeBuzzer = 0; 
            }
        
        // --- 2. TR·∫†NG TH√ÅI: ƒêANG ƒê·∫æM NG∆Ø·ª¢C
        } else if (!isNaN(parseInt(status)) && status !== 'waiting') {
            buzzerButton.textContent = status;
            buzzerButton.disabled = false; 
            buzzerStatus.textContent = 'TR·∫†NG TH√ÅI: ƒêANG ƒê·∫æM';
            buzzerAllowed = false;
            
        // --- 3. TR·∫†NG TH√ÅI: CH·ªú (Sau khi b·∫•m ho·∫∑c GV reset l∆∞·ª£t)
        } else if (status === 'waiting') {
            // M·ªü bƒÉng khi l∆∞·ª£t m·ªõi b·∫Øt ƒë·∫ßu (H·ªìi sinh)
            if (isFrozen) {
                // G·ªåI RUNG V√Ä √ÇM THANH KHI ƒê∆Ø·ª¢C H·ªíI SINH/K·∫æT TH√öC L∆Ø·ª¢T
                audioPing.play();
                navigator.vibrate([50, 50, 50]); 
                freezeOverlay.classList.remove('active'); 
                
                buzzerButton.style.backgroundColor = teamInfo.code;
                buzzerButton.style.color = 'white';
                buzzerStatus.textContent = 'TR·∫†NG TH√ÅI: CH·ªú';
            }
            isFrozen = false;
            buzzerAllowed = false;
            buzzerButton.disabled = true;
            buzzerButton.textContent = 'CH·ªú GI√ÅO VI√äN';
        }
    });

    // X·ª≠ l√Ω B·∫•m Chu√¥ng
    buzzerButton.onclick = async () => {
        const currentTime = Date.now();
        
        if (buzzerAllowed && !isFrozen) {
            // LU·∫¨T 1: B·∫•m H·ª£p L·ªá
            isFrozen = true;
            buzzerAllowed = false;
            
            await db.ref(playerPath).update({
                state: 'pressed',
                press_time: currentTime 
            });
            
            // H·ªçc sinh t·ª± ƒë·ªông reset game_session/status sau 5 gi√¢y (ƒë√∫ng theo y√™u c·∫ßu b·∫°n mu·ªën)
            setTimeout(async () => {
                const status = (await gameRef.child('status').once('value')).val();
                if (status === 'press_allowed') {
                    await gameRef.child('status').set('waiting');
                }
            }, 5000);

            buzzerButton.disabled = true;
            freezeOverlay.classList.add('active'); 
            freezeOverlay.textContent = 'ƒê√É B·∫§M - CH·ªú K·∫æT QU·∫¢';
            buzzerStatus.textContent = 'ƒê√É B·∫§M - CH·ªú K·∫æT QU·∫¢';
            
        } else if (!buzzerAllowed && !isFrozen) {
            // LU·∫¨T 2: Ki·ªÉm so√°t h√†nh vi spam 
            
            let gameStatus = (await gameRef.child('status').once('value')).val();

            if (!isNaN(parseInt(gameStatus))) { 
                
                pressCountBeforeBuzzer++;
                
                if (pressCountBeforeBuzzer === 1) {
                    buzzerStatus.textContent = 'C·∫¢NH C√ÅO TH·∫∫ V√ÄNG! (1 l·∫ßn ph·∫°m quy)';
                    db.ref(playerPath + '/yellow_cards').transaction((current) => (current || 0) + 1);
                    
                } else if (pressCountBeforeBuzzer >= 2) {
                    isFrozen = true;
                    buzzerButton.disabled = true;
                    freezeOverlay.classList.add('active');
                    freezeOverlay.textContent = 'B·ªä LO·∫†I! (2 l·∫ßn ph·∫°m quy li√™n ti·∫øp)';
                    buzzerStatus.textContent = 'TR·∫†NG TH√ÅI: B·ªä LO·∫†I';
                    await db.ref(playerPath).update({ state: 'eliminated' });
                }
            } 
        }
    };
}
